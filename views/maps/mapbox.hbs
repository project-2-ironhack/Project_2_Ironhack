<div class='sidebar'>
  <div class='heading'>
    <h1>Our locations</h1>
  </div>
  <div id='listings' class='listings'></div>
</div>
<div id='map' class='map pad2'></div>

<script>
  mapboxgl.accessToken = '{{token}}';
  // Here i must to send the object. It could be with ajax. 
  // Or maybe, I could print it with hbs inside the script tags
  var places = JSON.parse(decodeURI('{{places}}')) 
  places = places.map(e=>{
    let lat = e["geometry"]["coordinates"][0] 
    let lng = e["geometry"]["coordinates"][1]
    e["geometry"]["coordinates"][0] = lng
    e["geometry"]["coordinates"][1] = lat
    return e;
  })
  console.log(places)
  var map = new mapboxgl.Map({
    // container id specified in the HTML
    container: 'map',
    // style URL
    style: 'mapbox://styles/mapbox/light-v10',
    // initial position in [lon, lat] format
    center: [-3.692622799999999, 40.3967513],
    // initial zoom
    zoom: 5, 
/*    maxBounds: [
      // Recorrer las coordenadas y buscar los puntos m√°s alejados en norte y sur
      [-74.04728500751165, 40.68392799015035], // Southwest coordinates
      [-73.91058699000139, 40.87764500765852]  // Northeast coordinates
    ]
    */
  });
  map.on('load', function(e) {    
    // Add a new source from our GeoJSON data and set the
    // 'cluster' option to true. GL-JS will add the point_count property to your source data.
    map.addSource("earthquakes", {
      type: "geojson",
      // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
      // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
      data: {
        type: 'FeatureCollection',
        crs: {type: name, properties: {name: 'urn:ogc:def:crs:OGC:1.3:CRS84'}},
        features: places
      },
      cluster: true,
      clusterMaxZoom: 5, // Max zoom to cluster points on
      clusterRadius: 80 // Radius of each cluster when clustering points (defaults to 50)
    });
    map.addLayer({
      id: "clusters",
      type: "circle",
      source: "earthquakes",
      filter: ["has", "point_count"],
      paint: {
        // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
        // with three steps to implement three types of circles:                      
        "circle-color": [
          "step",
          ["get", "point_count"],
          "#51bbd6", 100,//   * Blue, 20px circles when point count is less than 100
          "#f1f075", 750,//   * Yellow, 30px circles when point count is between 100 and 750
          "#f28cb1"//         * Pink, 40px circles when point count is greater than or equal to 750
        ],
        "circle-radius": [
          "step",
          ["get", "point_count"],
          20, 100, 30, 750, 40
        ]
      }
    });
    map.addLayer({
      id: "cluster-count",
      type: "symbol",
      source: "earthquakes",
      filter: ["has", "point_count"],
      layout: {
        "text-field": "{point_count_abbreviated}",
        "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
        "text-size": 12
      }
    });
    map.addLayer({
      id: "unclustered-point",
      type: "circle",
      source: "earthquakes",
      filter: ["!", ["has", "point_count"]],
      paint: {
        "circle-color": "#11b4da",
        "circle-radius": 4,
        "circle-stroke-width": 1,
        "circle-stroke-color": "#fff"
      }
    });
    // inspect a cluster on click
    map.on('click', 'clusters', function (e) {
      var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
      var clusterId = features[0].properties.cluster_id;
      map.getSource('earthquakes').getClusterExpansionZoom(clusterId, function (err, zoom) {
        if (err) return;        
        map.easeTo({
          center: features[0].geometry.coordinates,
          zoom: zoom
        });
      });
    });
  });
</script>